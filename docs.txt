"Ad hoc package manager"

adhoc-packagem.pl

A Perl tool that "installs" files from a directory and then helps removing them all.

USAGE (see OPTIONS below, too)
inst [-p|-dummy] <source_dir> [-r <root_path>] [-file <output>[.insfiles]]
  [-nco] [-sc] [-strip]
del [-p] <input>.insfiles [-r <root_path>]
-h
--help


PREFACE
Currently it's not very smart, but it does the job.
When an .insfiles file in source directory is requested, an empty .insfiles
is created also in destination directory. (The "real" file under name specified
with -file option is created and valid, so it is not a big problem.)
It can be reproduced with this command:
'./adhoc-packagem.pl inst tst -file tst/x -r dest'.

Another notable case is when destination is a directory inside source (for
example when using: `inst .. -r d'). In this case this tool could attempt to
copy d/ into d/ infinitely (it's when cp(1) warns:
cp: cannot copy a directory, `..', into itself, `d/').
(This will be fixed at some point.) Otherwise this tool works very well.

See also SPECIAL FILES and OTHER INFO for more details.

PURPOSE
It can be used when you want to copy directory with some app to /usr/local
(or even /usr or /; the destination path "/" is the default) and then remove
it easily.

OPTIONS
Command line arguments must occur after source directory (inst) or .insfiles (del).
Options -p and -dummy are the exception: they can occur just after "inst" or "del"
(examples of permitted order: inst -p x; inst x -p; inst -dummy x). Duplicated
-p or -dummy are not allowed here: in "inst -p -p x", "-p" would be treated as
a "source_dir" argument.

* inst
inst [-p|-dummy] <source_dir> [-r <root_path>] [-file <output>[.insfiles]]
  [-nco] [-sc] [-strip]

Copy files from source_dir to root_path, or / if root_path is not specified.
Use -file output to specify output .insfiles (extension will be appended if
necessary). Default .insfiles is: cleaned_source_dir.insfile, where
cleaned_source_dir is source_dir with all dots stripped from the beginning and
the end of the last part of the path. Also, if the last part begins with a dot,
the text "FILES." is prepended to the file name. Examples follow.
/tmp/src -> /tmp/src.insfiles
/tmp/.src -> /tmp/FILES.src.insfiles

Argument source_dir must be a directory; root_path can be a directory or
a symbolic link pointing to a directory.

* del
del [-p] <input>.insfiles [-r <root_path>]
Reads input.insfiles and removes files and non-empty directories in reversed order.
If you specify -r root_path, it will be appended to all items. This could
be useful if you work with chroots. Use -p to see what resulting paths would look
like.
Note: additional -file input2.insfiles is permitted and will override input.insfiles.

* -h (or --help)
Prints some blah - informations and usage. If you are reading this file you
don't need this.

* -p
Run in pretend mode. See PRETEND MODE.

* -dummy
When in dummy mode, nothing is copied to destination directory. Only an .insfiles
file is created, without checking for any conflicts that might occur without
this option.

This can be useful to recreate an .insfiles after it has been lost using only
original source directory. Note that such .insfiles file will be different from
the original one if for example previous "inst" was run with option "-sc" and
file collisions were detected and thus not recorded in the .insfiles content,
but these files will be recorded now with -dummy option used.

* -nco
Only allowed with "inst".
"No change ownership" - don't alter ownership of files and directories that
has been copied.

This option is useful when you (as root) "install" files that belong to another
user and want the files in destination path to be owned by root.
Another case when this option is useful is when you have no permission to
change ownership and want to avoid "can't change owner/group" warnings.
MORE INFO section contains more informations about changing file modes.
This has no effect (besides of printing a message) with -p and -dummy.

* -r
Specify alternative root path (or destination). If used multiple times, the last
one will be used. See description for "inst" and "del".

* -sc
Only allowed with "inst".
"Skip on conflict" - allows to continue copying if an item in destination
directory already exist. The only exception is when source is a directory (not
a symbolic link pointing to a directory) and destination is a file. In such
a case copying will abort, as usual. The reason: if we have file structure
in source directory like this: abc/def (abc is a directory) and in destination:
abc (abc is a file), copying the file abc/def will fail anyway, because there
is no abc directory to copy to.

A file that has been skipped is not recorded in an .insfiles file and will not
be removed when "del" command is used.

* -file
Specify alternative name (path) to an .insfiles file. Most useful with "inst",
but can be used with "del", too. If used multiple times, the last one will be used.

* -strip
If this option is used, root directory saved in an .insfiles is set to "/".
In other words, the remaining part is "stripped". This only affects contents
of the file with list; files are installed as normal. This option can be useful
when you install to a chroot. To remove files from the same location as before,
the '-r' argument can be used with "del".

For example:
./adhoc-packagem.pl inst src -r /opt/dst -file haha.insfiles -strip
# src.insfiles wouldn't contain the full path to "dst"; to remove files:
./adhoc-packagem.pl del haha.insfiles -r /opt/dst.

SPECIAL FILES
A note about non-regular files on "inst".
Symbolic links: a new symbolic link is made in the destination directory, and new
symlink's "content" (where it points to) is exactly the same as of the original one.
Note it doesn't mean the new symbolic link will always point to the same
item in a filesystem - it means only that, for example, "../xyz" will be "../xyz".
Another special files are ignored and a warning is issued.
There's no attempt to change owner, group or permissions for a symbolic link.

OTHER INFO
* inst
It tries to operate safely. If a file already exists it won't be overwritten
(in such a case the process will abort unless "-sc" is used - all changes can be
undone with "del" command).

However, if a directory (or a symbolic link that points to a directory) already
exists, it will be used. Such a directory (or symbolic link) won't be removed
with "del" option.

If a source item is a directory and a file with the same name exists in destination
directory, the process is aborted.

If a source item is not a directory and a directory (or a symbolic link pointing
to a directory) with the same name exists in destination directory, the process
is aborted unless "-sc" option is used.

It tries to change mode (writable, executable etc.) of created item to match the
original one's mode (note: not for symbolic links; not for directories that already
exist). On success, tries to set the same UID and GID, too (same note as above),
unless the -nco ("no change ownership") option is specified.

If any of these two operations fail, a warning is issued, but the process
is not aborted.

Access or modification time of created item is set as-is (usually it will be
"now").

If a file cannot be copied or a symbolic link cannot be made, a message is
printed on screen and the process is aborted.
If none of these options are provided: -p, -sc, -dummy, then if nothing has been
copied due to an error (usually permission error), .insfiles file is deleted.

* del
Currently it does not check if file was modified in any way after installing with
this tool, and removes it when using "del" option anyway.
When removing directories it uses the rmdir function, that will refuse to
delete non-empty directory. It is good and intended! (A non-empty directory
occurs if something was added to it after "installing" with this tool.)
If an item was already removed, a warning is issued.

PRETEND MODE
Pretend mode (-p) is a simple way to check of what would be done.
* with "inst":
- generates an .insfiles,
- checks if there are any conflicts ("If a file already exists it won't be
overwritten" etc. above),
- does not check for permissions or another problems that can occur during copying;

* with "del":
- reads an .insfiles (with normal check whether it's OK),
- writes what file (or maybe directory - see below) would be removed,
- if such a file/directory does not exist anymore, tells user about it,
- a non-empty directory would not be removed, but in this mode user won't be
notified about this fact.

PORTABILITY AND NOTES FOR NON-UNIX OPERATING SYSTEMS
It has been tested and proved itself to work on a GNU/Linux system and MS Windows.
Systems using some kind of exotic path notation are not supported.
An .insfiles file stores paths using path separators native to the operating
system (slashes on Linux and backslashes on Windows). It means that an .insfiles
file generated on Linux should work on Windows, but the opposite is not true.

"Volume" is not stored, so for example "C:\directory\subdir" is stored as
"\directory\subdir". It means that you may need to change working drive first
with "del". (Option -r with drive letter should work, but it's not tested so not
recommended.) With "inst" you must change drive to the one where you want
files to be placed, because with "inst" drive letter specified with -r is ignored.

The tool can be found currently here: https://github.com/Enlik/adhoc-packagem.
by Enlik
January/April/December 2011, January/December 2012

End of file.
